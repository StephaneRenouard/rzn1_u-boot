/*
 * Cadence DDR Controller
 *
 * Copyright (C) 2015 Renesas Electronics Europe Ltd
 *
 * SPDX-License-Identifier: BSD-2-Clause
 *
 */

#ifndef CADENCE_DDR_CTRL_H
#define CADENCE_DDR_CTRL_H

/**
 * Initialise the Cadence DDR Controller.
 *
 * It sets up the controller so that all 4 AXI slave ports allow access to all
 * of the DDR with the same settings. This means that:
 *  - Full access permisions.
 *  - All read/write priorities are set to 2.
 *  - Bandwidth is set to 50%, overflow is allowed, i.e. it's a soft limit.
 *
 * @ddr_ctrl_base  Physical address of the DDR Controller.
 * @async          0 if DDR clock is synchronous with the controller clock
 *                 otherwise 1.
 * @reg0           Pointer to array of 32-bit values to be written to registers
 *                 0 to 87. The values are generated by Cadence TCL scripts.
 * @reg350         Pointer to array of 32-bit values to be written to registers
 *                 350 to 374. The values are generated by Cadence TCL scripts.
 * @ddr_start_addr Physical address of the start of DDR.
 * @ddr_size       Size of the DDR in bytes. The controller will restrict access
 *                 to the size specified.
 */
void cdns_ddr_ctrl_init(u32 *ddr_ctrl_base, int async,
			const u32 *reg0, const u32 *reg350,
			u32 ddr_start_addr, u32 ddr_size);

/**
 * Set the priority for read and write operations for a specific AXI slave port.
 *
 * @base      Physical address of the DDR Controller.
 * @port      Port number. Range is 0 to 3.
 * @read_pri  Priority for reads.  Range is 0 to 3, where 0 is highest priority.
 * @write_pri Priority for writes. Range is 0 to 3, where 0 is highest priority.
 */
void cdns_ddr_set_port_rw_priority(void *base, int port,
			  u8 read_pri, u8 write_pri, u8 fifo_type);

/**
 * Specify address range for a protection entry, for a specific AXI slave port.
 *
 * @base       Physical address of the DDR Controller.
 * @port       Port number. Range is 0 to 3.
 * @entry      The protection entry. Range is 0 to 15.
 * @start_addr Physical of the address range, must be aligned to 16KB.
 * @size       Size of the address range, must be multiple of 16KB.
 */
void cdns_ddr_enable_port_addr_range_x(void *base, int port, int entry,
			      u32 addr_start, u32 size);

/**
 * Specify protection entry details, for a specific AXI slave port.
 *
 * See the hardware manual for details of the range check bits.
 *
 * @base       Physical address of the DDR Controller.
 * @port       Port number. Range is 0 to 3.
 * @entry      The protection entry. Range is 0 to 15.
 */
void cdns_ddr_enable_port_prot_x(void *base, int port, int entry,
	u8 range_protection_bits,
	u16 range_RID_check_bits,
	u16 range_WID_check_bits,
	u8 range_RID_check_bits_ID_lookup,
	u8 range_WID_check_bits_ID_lookup);

void set_port_bandwidth(void *base, int port,
		        u8 max_percent, u8 overflow_ok);

#endif
