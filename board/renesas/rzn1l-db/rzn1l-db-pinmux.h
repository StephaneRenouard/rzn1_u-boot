/*
 * This file was autogenerated
 * DO NOT EDIT
 * (C) 2015-2016 Renesas Electronics Europe, LTD
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */

#ifndef __RZN1_BOARD_PINMUX_H__
#define __RZN1_BOARD_PINMUX_H__
/*
 * AUTOGENERATED DO NOT EDIT
 *
 * Renesas RZ/N1L-DB board
 * This file only sets the pin function by default.
 *
 * You can override the default mux pullup/down and drive by
 * defining the following macros in the board file before
 * including this.
 */

#ifndef RZN1_MUX_DEFAULT
#define RZN1_MUX_DEFAULT RZN1_MUX
#endif

#include "renesas/pinctrl-rzn1.h"

#ifndef RZN1_MUX_CAT
#define RZN1_MUX_CAT RZN1_MUX_DEFAULT
#endif
#ifndef RZN1_MUX_ETH3
#define RZN1_MUX_ETH3 RZN1_MUX_PNONE_6MA
#endif
#ifndef RZN1_MUX_ETH4
#define RZN1_MUX_ETH4 RZN1_MUX_PNONE_6MA
#endif
#ifndef RZN1_MUX_GPIO
#define RZN1_MUX_GPIO RZN1_MUX_DEFAULT
#endif
#ifndef RZN1_MUX_GPIO0
#define RZN1_MUX_GPIO0 RZN1_MUX_GPIO
#endif
#ifndef RZN1_MUX_GPIO1
#define RZN1_MUX_GPIO1 RZN1_MUX_GPIO
#endif
#ifndef RZN1_MUX_I2C1
#define RZN1_MUX_I2C1 RZN1_MUX_12MA
#endif
#ifndef RZN1_MUX_MDIO
#define RZN1_MUX_MDIO RZN1_MUX_DEFAULT
#endif
#ifndef RZN1_MUX_MDIO0
#define RZN1_MUX_MDIO0 RZN1_MUX_MDIO
#endif
#ifndef RZN1_MUX_MDIO1
#define RZN1_MUX_MDIO1 RZN1_MUX_MDIO
#endif
#ifndef RZN1_MUX_NMI
#define RZN1_MUX_NMI RZN1_MUX_DEFAULT
#endif
#ifndef RZN1_MUX_QSPI0
#define RZN1_MUX_QSPI0 RZN1_MUX_PNONE
#endif
#ifndef RZN1_MUX_REFCLK
#define RZN1_MUX_REFCLK RZN1_MUX_PNONE
#endif
#ifndef RZN1_MUX_SWITCH
#define RZN1_MUX_SWITCH RZN1_MUX_DEFAULT
#endif
#ifndef RZN1_MUX_UART
#define RZN1_MUX_UART RZN1_MUX_DEFAULT
#endif
#ifndef RZN1_MUX_UART0
#define RZN1_MUX_UART0 RZN1_MUX_UART
#endif

#define RZN1_MUX_PERIPH_BIT	24

/*
 * These numbers are arbitrary and do not correspond to anything
 * on the hardware, they are for the application convenience only
 * and *will* change if the pinmux is regenerated by the Webapp.
 */
enum {
	RZN1_P_CAT = 0, RZN1_P_ETH3, RZN1_P_ETH4, RZN1_P_GPIO0, RZN1_P_GPIO1, RZN1_P_I2C1,
	RZN1_P_MDIO0, RZN1_P_MDIO1, RZN1_P_NMI, RZN1_P_QSPI0, RZN1_P_REFCLK, RZN1_P_SWITCH,
	RZN1_P_UART0,
};

/*
 * A peripheral number is also encoded in these constants to
 * help parsing in case your code wishes to do pinmux selectively
 */
#define _RZP(_P, _M) ((_M) | (RZN1_##_P << RZN1_MUX_PERIPH_BIT))

static const uint32_t rzn1_pinmux_map[] = {
	_RZP(P_CAT, RZN1_MUX_CAT(112, ETHERCAT)),		/* CAT_I2CDATA */
	_RZP(P_CAT, RZN1_MUX_CAT(113, ETHERCAT)),		/* CAT_I2CCLK */
	_RZP(P_ETH3, RZN1_MUX_ETH3(36, CLK_ETH_MII_RGMII_RMII)),	/* ETH3_TXCLK */
	_RZP(P_ETH3, RZN1_MUX_ETH3(37, CLK_ETH_MII_RGMII_RMII)),	/* ETH3_TXD[0] */
	_RZP(P_ETH3, RZN1_MUX_ETH3(38, CLK_ETH_MII_RGMII_RMII)),	/* ETH3_TXD[1] */
	_RZP(P_ETH3, RZN1_MUX_ETH3(39, CLK_ETH_MII_RGMII_RMII)),	/* ETH3_TXD[2] */
	_RZP(P_ETH3, RZN1_MUX_ETH3(40, CLK_ETH_MII_RGMII_RMII)),	/* ETH3_TXD[3] */
	_RZP(P_ETH3, RZN1_MUX_ETH3(41, CLK_ETH_MII_RGMII_RMII)),	/* ETH3_TXEN */
	_RZP(P_ETH3, RZN1_MUX_ETH3(42, CLK_ETH_MII_RGMII_RMII)),	/* ETH3_RXCLK */
	_RZP(P_ETH3, RZN1_MUX_ETH3(43, CLK_ETH_MII_RGMII_RMII)),	/* ETH3_RXD[0] */
	_RZP(P_ETH3, RZN1_MUX_ETH3(44, CLK_ETH_MII_RGMII_RMII)),	/* ETH3_RXD[1] */
	_RZP(P_ETH3, RZN1_MUX_ETH3(45, CLK_ETH_MII_RGMII_RMII)),	/* ETH3_RXD[2] */
	_RZP(P_ETH3, RZN1_MUX_ETH3(46, CLK_ETH_MII_RGMII_RMII)),	/* ETH3_RXD[3] */
	_RZP(P_ETH3, RZN1_MUX_ETH3(47, CLK_ETH_MII_RGMII_RMII)),	/* ETH3_RXDV */
	_RZP(P_ETH3, RZN1_MUX_ETH3(67, CLK_ETH_MII_RGMII_RMII)),	/* ETH3_RXER */
	_RZP(P_ETH3, RZN1_MUX_ETH3(68, CLK_ETH_MII_RGMII_RMII)),	/* ETH3_CRS */
	_RZP(P_ETH3, RZN1_MUX_ETH3(69, CLK_ETH_MII_RGMII_RMII)),	/* ETH3_COL */
	_RZP(P_ETH4, RZN1_MUX_ETH4(48, CLK_ETH_MII_RGMII_RMII)),	/* ETH4_TXCLK */
	_RZP(P_ETH4, RZN1_MUX_ETH4(49, CLK_ETH_MII_RGMII_RMII)),	/* ETH4_TXD[0] */
	_RZP(P_ETH4, RZN1_MUX_ETH4(50, CLK_ETH_MII_RGMII_RMII)),	/* ETH4_TXD[1] */
	_RZP(P_ETH4, RZN1_MUX_ETH4(51, CLK_ETH_MII_RGMII_RMII)),	/* ETH4_TXD[2] */
	_RZP(P_ETH4, RZN1_MUX_ETH4(52, CLK_ETH_MII_RGMII_RMII)),	/* ETH4_TXD[3] */
	_RZP(P_ETH4, RZN1_MUX_ETH4(53, CLK_ETH_MII_RGMII_RMII)),	/* ETH4_TXEN */
	_RZP(P_ETH4, RZN1_MUX_ETH4(54, CLK_ETH_MII_RGMII_RMII)),	/* ETH4_RXCLK */
	_RZP(P_ETH4, RZN1_MUX_ETH4(55, CLK_ETH_MII_RGMII_RMII)),	/* ETH4_RXD[0] */
	_RZP(P_ETH4, RZN1_MUX_ETH4(56, CLK_ETH_MII_RGMII_RMII)),	/* ETH4_RXD[1] */
	_RZP(P_ETH4, RZN1_MUX_ETH4(57, CLK_ETH_MII_RGMII_RMII)),	/* ETH4_RXD[2] */
	_RZP(P_ETH4, RZN1_MUX_ETH4(58, CLK_ETH_MII_RGMII_RMII)),	/* ETH4_RXD[3] */
	_RZP(P_ETH4, RZN1_MUX_ETH4(59, CLK_ETH_MII_RGMII_RMII)),	/* ETH4_RXDV */
	_RZP(P_ETH4, RZN1_MUX_ETH4(71, CLK_ETH_MII_RGMII_RMII)),	/* ETH4_RXER */
	_RZP(P_ETH4, RZN1_MUX_ETH4(72, CLK_ETH_MII_RGMII_RMII)),	/* ETH4_CRS */
	_RZP(P_ETH4, RZN1_MUX_ETH4(73, CLK_ETH_MII_RGMII_RMII)),	/* ETH4_COL */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(0, GPIO)),			/* GPIO0A[0] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(1, GPIO)),			/* GPIO0B[0] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(2, GPIO)),			/* GPIO0B[1] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(3, GPIO)),			/* GPIO0A[1] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(4, GPIO)),			/* GPIO0A[2] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(5, GPIO)),			/* GPIO0B[2] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(6, GPIO)),			/* GPIO0B[3] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(7, GPIO)),			/* GPIO0B[4] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(8, GPIO)),			/* GPIO0B[5] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(9, GPIO)),			/* GPIO0A[3] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(10, GPIO)),		/* GPIO0A[4] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(11, GPIO)),		/* GPIO0B[6] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(62, GPIO)),		/* GPIO0A[25] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(63, GPIO)),		/* GPIO0A[26] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(64, GPIO)),		/* GPIO0A[27] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(65, GPIO)),		/* GPIO0A[28] */
	_RZP(P_GPIO0, RZN1_MUX_GPIO0(66, GPIO)),		/* Eth 0 reset (GPIO0A[29]) */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(70, GPIO)),		/* Eth 0 IRQ (GPIO1A[1]) */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(82, GPIO)),		/* GPIO1B[13] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(83, GPIO)),		/* GPIO1B[14] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(84, GPIO)),		/* GPIO1B[15] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(85, GPIO)),		/* GPIO1B[16] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(86, GPIO)),		/* GPIO1B[17] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(87, GPIO)),		/* GPIO1B[18] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(88, GPIO)),		/* GPIO1B[19] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(89, GPIO)),		/* GPIO1B[20] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(90, GPIO)),		/* GPIO1B[21] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(91, GPIO)),		/* GPIO1B[22] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(92, GPIO)),		/* GPIO1B[23] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(93, GPIO)),		/* GPIO1B[24] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(94, GPIO)),		/* Eth 3 and 4 reset (GPIO1B[25]) */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(95, GPIO)),		/* Eth 3 IRQ (GPIO1A[5]) */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(96, GPIO)),		/* Eth 4 IRQ (GPIO1A[6]) */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(105, GPIO)),		/* GPIO1A[15] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(106, GPIO)),		/* GPIO1A[16] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(107, GPIO)),		/* GPIO1A[17] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(108, GPIO)),		/* GPIO1A[18] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(114, GPIO)),		/* GPIO1A[24] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(117, GPIO)),		/* GPIO1A[27] */
	_RZP(P_GPIO1, RZN1_MUX_GPIO1(118, GPIO)),		/* GPIO1A[28] */
	_RZP(P_I2C1, RZN1_MUX_I2C1(115, I2C)),			/* I2C1_SCL */
	_RZP(P_I2C1, RZN1_MUX_I2C1(116, I2C)),			/* I2C1_SDA */
	_RZP(P_MDIO0, RZN1_MUX_MDIO0(99, ETH_MDIO)),		/* MDIO0_MDC */
	_RZP(P_MDIO0, RZN1_MUX_MDIO0(100, ETH_MDIO)),		/* MDIO0_MDIO */
	_RZP(P_MDIO0, RZN1_MUX_MDIO0(170, MDIO_MUX_MAC0)),	/* MDIO0_MUX_MAC0 */
	_RZP(P_MDIO1, RZN1_MUX_MDIO1(97, ETH_MDIO)),		/* MDIO1_MDC */
	_RZP(P_MDIO1, RZN1_MUX_MDIO1(98, ETH_MDIO)),		/* MDIO1_MDIO */
	_RZP(P_MDIO1, RZN1_MUX_MDIO1(171, MDIO_MUX_SWITCH)),	/* MDIO1_MUX_SWITCH */
	_RZP(P_NMI, RZN1_MUX_NMI(111, ETHERCAT)),		/* NMI_CORTEXM[3] */
	_RZP(P_QSPI0, RZN1_MUX_QSPI0(74, QSPI)),		/* QSPI0_CS_N[0] */
	_RZP(P_QSPI0, RZN1_MUX_QSPI0(75, QSPI)),		/* QSPI0_IO[3] */
	_RZP(P_QSPI0, RZN1_MUX_QSPI0(76, QSPI)),		/* QSPI0_IO[2] */
	_RZP(P_QSPI0, RZN1_MUX_QSPI0(77, QSPI)),		/* QSPI0_IO[1] */
	_RZP(P_QSPI0, RZN1_MUX_QSPI0(78, QSPI)),		/* QSPI0_IO[0] */
	_RZP(P_QSPI0, RZN1_MUX_QSPI0(79, QSPI)),		/* QSPI0_CLK */
	_RZP(P_REFCLK, RZN1_MUX_REFCLK(60, CLK_ETH_NAND)),	/* REFCLK_MII[0] */
	_RZP(P_REFCLK, RZN1_MUX_REFCLK(61, CLK_ETH_NAND)),	/* REFCLK_MII[1] */
	_RZP(P_SWITCH, RZN1_MUX_SWITCH(80, MAC_MTIP_SWITCH)),	/* SWITCH_MII_LINK[5] */
	_RZP(P_SWITCH, RZN1_MUX_SWITCH(81, MAC_MTIP_SWITCH)),	/* SWITCH_MII_LINK[4] */
	_RZP(P_UART0, RZN1_MUX_UART0(103, UART0_I)),		/* UART0_TXD */
	_RZP(P_UART0, RZN1_MUX_UART0(104, UART0_I)),		/* UART0_RXD */
	0L, /* terminator */
};
/*
 * Sample function for setting the pinmux. Pass -1 for setting /all/
 * the pins, pass any of the RZN1_P_xxx for setting just that one set
 * returns the number of pins that have been set.
 * There is also a variant where you can pass multiple peripherals as
 * a bitmask.
 */
#ifdef USE_DEFAULT_PINMUX
/* Functions are marked 'unused' to prevent warnings on modern GCC */
#if defined(__GNUC__)
#define __unused __attribute__((unused))
#elif !defined(__unused)
#define __unused
#endif
static int rzn1_board_pinmux(int periph /* = -1 */) __unused;
static int rzn1_board_pinmux(int periph /* = -1 */) {
 int i, cnt = 0;
 for (i = 0; rzn1_pinmux_map[i]; i++)
  if (periph == -1 ||
      (rzn1_pinmux_map[i] >> RZN1_MUX_PERIPH_BIT) == (uint32_t)periph) {
       rzn1_pinmux_set(rzn1_pinmux_map[i]);
       cnt++;
 }
 return cnt;
}
static int rzn1_board_pinmux_mask(uint32_t periph_mask /* = -1 */) __unused;
static int rzn1_board_pinmux_mask(uint32_t periph_mask /* = -1 */) {
 int i, cnt = 0;
 for (i = 0; rzn1_pinmux_map[i]; i++)
  if (periph_mask & (1 << (rzn1_pinmux_map[i] >> RZN1_MUX_PERIPH_BIT))) {
   rzn1_pinmux_set(rzn1_pinmux_map[i]);
   cnt++;
  }
 return cnt;
}
#endif

/*
 * This is the compressed Renesas Pinmux Web App data structure; this is
 * used to allow uploading this file back into the web app, make some
 * more changes and generate/save the DTS again. It is not used by Linux
 * in any way.
 */
#ifdef JSON_PRESET
N4IgdghgtgpiBcIBKMwwM4XQAiQLQHoA5ARgBkBaAEQCFsAjAewgCcATEAGhAAcIBjANYQA5nEQAbEgE4AbF14wWASx4ALJRAnoE
AbRABhAIIAVBQFETACRIXrAFjtWArAoDiABQCSAeVvdPXwAmd28fAGYFLyCDEO4AWSpffxBE4IUieK8FAEUAZW8UpHMAMQMyAGkF
PIB1LxMDKwUAVSMkE1sAXW4RHmVGAH1IWB14UCDpBBBzABc1bAAGbBYMGBmFWVdEWfmlryQcjcntuexw7H3D7gB2Bamd7HsLg4US
INsT+fOIMDZH5dW624b3kiESBmwHisAE0SNhAj5XkFrlM0j5ITC4QiQABfHp9RijXT2a6yEiyTgksnXSmkkgADlpZOkTKCC1ZJFZ
QVZ4VZ9lZzlZFKpyM412c9ne3PFkpIvJl735CpIguVFOVNOVjOVLIVbLFEqC7wNkqNJqN8sNQSVVtVVvVVs1Vu1Vt1hvC7IV4U5X
ul7stkvCNsDguczmu9Pp/LDEfpgqpEaZ1xZVPp7NTnNTfsl9gD1uD1vjpPpDpzTpzLpzLLD9JV0ectbDnBrKopLfDzYbKsZ7erJA
W1ub/aCRdk0kZVOkKeut3TM4Wmfn3JJt15K4W/PXRduwvnNPXE/n0+u/dpJ8XJ+54Vk9nsLOv9mc7Ifzk5L6vzJp15kjPCcYWvJ/
k+m4zsaK5muBa6gSB46LuOV7OGOgrhIhcicChY77jOHrNgsY7SKGeFTru1zhFBpHRuSQRts47wkJ0OJAA===
#endif

#endif /* __RZN1_BOARD_PINMUX_H__ */
